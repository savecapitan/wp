networks:
  wordpress-network:
    external: true
  traefik-network:
    external: true

volumes:
  mariadb-data:
  wordpress-data:
  wordpress-mariadb-backup:
  wordpress-data-backups:
  wordpress-database-backups:
  traefik-certificates:
  redis:

services:
  mariadb:
    image: ${WORDPRESS_MARIADB_IMAGE_TAG}
    volumes:
      - mariadb-data:/var/lib/mysql
    environment:
      MARIADB_DATABASE: ${WORDPRESS_DB_NAME}
      MARIADB_USER: ${WORDPRESS_DB_USER}
      MARIADB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${WORDPRESS_DB_ADMIN_PASSWORD}
    networks:
      - wordpress-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  wordpress:
    image: ${WORDPRESS_IMAGE_TAG}
    volumes:
      - wordpress:/var/www/html
      - ./php/custom.ini:/usr/local/etc/php/conf.d/custom.ini
    environment:
      WORDPRESS_DATABASE_HOST: mariadb
      WORDPRESS_DATABASE_PORT_NUMBER: 3306
      WORDPRESS_DATABASE_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DATABASE_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DATABASE_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_TABLE_PREFIX: ${WORDPRESS_TABLE_PREFIX}
      WORDPRESS_BLOG_NAME: ${WORDPRESS_BLOG_NAME}
      WORDPRESS_FIRST_NAME: ${WORDPRESS_ADMIN_NAME}
      WORDPRESS_LAST_NAME: ${WORDPRESS_ADMIN_LASTNAME}
      WORDPRESS_USERNAME: ${WORDPRESS_ADMIN_USERNAME}
      WORDPRESS_PASSWORD: ${WORDPRESS_ADMIN_PASSWORD}
      WORDPRESS_EMAIL: ${WORDPRESS_ADMIN_EMAIL}
      WORDPRESS_SMTP_HOST: ${WORDPRESS_SMTP_ADDRESS}
      WORDPRESS_SMTP_PORT: ${WORDPRESS_SMTP_PORT}
      WORDPRESS_SMTP_USER: ${WORDPRESS_SMTP_USER_NAME}
      WORDPRESS_SMTP_PASSWORD: ${WORDPRESS_SMTP_PASSWORD}
      WORDPRESS_CONFIG_EXTRA: |
          define( 'WP_REDIS_HOST', 'redis' );
          define( 'WP_REDIS_PORT', 6379 );
          define( 'WP_DEBUG', false );
          define( 'COMPRESS_CSS', true );
          define( 'COMPRESS_SCRIPTS', true );
          define( 'CONCATENATE_SCRIPTS', true );
          define( 'ENFORCE_GZIP', true );
          define( 'AUTOSAVE_INTERVAL', 120 );
          define( 'WP_POST_REVISIONS', 10);
          define( 'MEDIA_TRASH', true );
          define( 'EMPTY_TRASH_DAYS', 30 );
          define( 'IMAGE_EDIT_OVERWRITE', true );
          define( 'DISALLOW_FILE_EDIT', true );     
    networks:
      - wordpress-network
      - traefik-network
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wordpress.rule=Host(`${WORDPRESS_HOSTNAME}`)"
      - "traefik.http.routers.wordpress.service=wordpress"
      - "traefik.http.routers.wordpress.entrypoints=websecure"
      - "traefik.http.services.wordpress.loadbalancer.server.port=8080"
      - "traefik.http.routers.wordpress.tls=true"
      - "traefik.http.routers.wordpress.tls.certresolver=letsencrypt"
      - "traefik.http.services.wordpress.loadbalancer.passhostheader=true"
      - "traefik.http.routers.wordpress.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
      wptraefik:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Nginx is used as the web server because it support PHP-FPM engine and has better caching fucntionality
  nginx:
    depends_on:
      - wordpress
    image: nginx:${NGINX_IMAGE_TAG}
    container_name: nginx
    restart: unless-stopped
    labels:
    # http with redirection
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.wp.entrypoints=web,websecure
      - traefik.http.routers.wp.tls=true
      - traefik.http.routers.wp.rule=Host(`${URL}`, `${URL_WWW}`)
      - traefik.http.routers.wp.service=wp
      - traefik.http.services.wp.loadbalancer.server.port=80
      # https
      - traefik.http.routers.wpsecure.entrypoints=websecure
      - traefik.http.routers.wpsecure.tls=true
      - traefik.http.routers.wpsecure.rule=Host(`${URL}`, `${URL_WWW}`)
      - traefik.http.routers.wpsecure.service=wpsecure
      - traefik.http.services.wpsecure.loadbalancer.server.port=80

    volumes:
      - wordpress:/var/www/html
      - ./nginx:/etc/nginx/conf.d
      - ./certs:/etc/ssl/certs  
      #- certbot-etc:/etc/letsencrypt
    networks:
      - wordpress-network
      - traefik-network

  redis:
    image: redis:${REDIS_IMAGE_TAG}
    container_name: redis
    restart: unless-stopped
    command: 
      - redis-server
      - --save 60 500 # This config will make Redis automatically dump the dataset to disk every 60 seconds if at least 500 keys changed:
      - --loglevel warning
      - --maxmemory 256mb 
      - --maxmemory-policy allkeys-lfu # Keeps frequently used keys; removes least frequently used (LFU) keys
    volumes:
      - redis:/data
    networks:
      - wordpress-network
  #certbot:
  #  depends_on:
  #    - nginx
  #  image: certbot/certbot
  #  container_name: certbot
  #  volumes:
  #    - certbot-etc:/etc/letsencrypt
  #    - wordpress:/var/www/html
  #  command: certonly --webroot --webroot-path=/var/www/html --email sammy@your_domain --agree-tos --no-eff-email --force-renewal -d your_domain -d www.your_domain
    

  wptraefik:
    image: ${TRAEFIK_IMAGE_TAG}
    command:
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.ping.address=:8082"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-certificates:/etc/traefik/acme
    networks:
      - traefik-network
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped

  backups:
    image: ${WORDPRESS_MARIADB_IMAGE_TAG}
    command: >-
      sh -c 'sleep $BACKUP_INIT_SLEEP &&
      while true; do
        mariadb-dump -h mariadb -u $WORDPRESS_DB_USER -p"$WORDPRESS_DB_PASSWORD" $WORDPRESS_DB_NAME | gzip > "$MARIADB_BACKUPS_PATH/$MARIADB_BACKUP_NAME-$(date '+%Y-%m-%d_%H-%M').gz" &&
        tar -zcpf $DATA_BACKUPS_PATH/$DATA_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").tar.gz $DATA_PATH &&
        find $MARIADB_BACKUPS_PATH -type f -mtime +$MARIADB_BACKUP_PRUNE_DAYS | xargs rm -f &&
        find $DATA_BACKUPS_PATH -type f -mtime +$DATA_BACKUP_PRUNE_DAYS | xargs rm -f;
        sleep $BACKUP_INTERVAL; done'
    volumes:
      - wordpress-mariadb-backup:/var/lib/mysql
      - wordpress-data:${DATA_PATH}
      - wordpress-data-backups:${DATA_BACKUPS_PATH}
      - wordpress-database-backups:${MARIADB_BACKUPS_PATH}
    environment:
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      BACKUP_INIT_SLEEP: ${BACKUP_INIT_SLEEP}
      BACKUP_INTERVAL: ${BACKUP_INTERVAL}
      MARIADB_BACKUP_PRUNE_DAYS: ${MARIADB_BACKUP_PRUNE_DAYS}
      DATA_BACKUP_PRUNE_DAYS: ${DATA_BACKUP_PRUNE_DAYS}
      MARIADB_BACKUPS_PATH: ${MARIADB_BACKUPS_PATH}
      DATA_BACKUPS_PATH: ${DATA_BACKUPS_PATH}
      DATA_PATH: ${DATA_PATH}
      MARIADB_BACKUP_NAME: ${MARIADB_BACKUP_NAME}
      DATA_BACKUP_NAME: ${DATA_BACKUP_NAME}
    networks:
      - wordpress-network
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy